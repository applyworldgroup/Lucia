generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String
  hashedPassword        String
  email_verified        Boolean
  firstName             String
  lastName              String
  role                  Role                   @default(USER)
  emailVerificationCode EmailVerificationCode?
  ResetToken            ResetToken[]
  sessions              Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    String   @unique
  email     String
  expiresAt DateTime
  sentAt    DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        String   @id @default(uuid())
  userId    String
  code      String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id                String             @id @default(uuid())
  firstName         String
  middleName        String?
  lastName          String
  email             String             @unique
  address           String?
  passportNumber    String?            @unique
  currentVisa       VisaType?
  visaExpiry        DateTime?
  phone             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  jobReadyPrograms  JobReadyProgram[]
  skillsAssessments SkillsAssessment[]
  visaApplications  VisaApplication[]
}

model Appointment {
  id              String            @id @default(uuid())
  firstName       String
  middleName      String?
  lastName        String
  email           String
  address         String
  phone           String
  appointmentDate DateTime
  appointmentTime String
  status          AppointmentStatus
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  reasonOfVisit   String
}

model VisaApplication {
  id              String   @id @default(uuid())
  visaAppliedDate DateTime 
  visaStatus      Status
  visaType        VisaType
  totalAmount     Float    @default(0.0)
  totalPaid       Float    @default(0.0)
  customerId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model JobReadyProgram {
  id                String    @id @default(uuid())
  customerId        String
  startDate         DateTime?
  workplacement     String?
  employerName      String?
  employerABN       String?
  supervisorName    String?
  supervisorContact String?
  completionDate    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  outcomeResult     OUTCOME
  stage             JRPStage
  jrpUserId         String?
  jrpPassword       String?
  question1         String?
  question2         String?
  question3         String?
  totalAmount       Float     @default(0.0)
  totalPaid         Float     @default(0.0)
  customer          Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model SkillsAssessment {
  id                 String    @id @default(uuid())
  customerId         String
  occupation         String
  assessingAuthority String
  applicationDate    DateTime
  outcomeDate        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  stage              SAStage
  outcomeResult      OUTCOME?
  rpl                String
  totalAmount        Float     @default(0.0)
  totalPaid          Float     @default(0.0)
  customer           Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Company {
  id                String        @id @default(uuid())
  tradingName       String
  name              String?
  director          String?
  email             String?
  phone             String?
  abn               String?
  address           String?
  website           String?
  sbsStatus         SbsStatusEnum @default(NOT_APPROVED)
  associatedClients Int?
  approvalDate      DateTime?
  expiryDate        DateTime?

  @@map("company")
}

model GeneralEnquiry {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name          String     @db.VarChar(255)
  email              String     @db.VarChar(255)
  country            String     @db.VarChar(255)
  phone_number       String     @db.VarChar(50)
  purpose_of_enquiry String
  follow_up_dates    DateTime[] @default([]) @db.Date
  remarks            String?    @db.VarChar(500)
  created_at         DateTime   @default(now()) @db.Timestamp(6)
  updated_at         DateTime   @default(now()) @db.Timestamp(6)
  followed_up_by     String?    @db.VarChar(255)

  @@map("general_enquiry")
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
}

enum JRPStage {
  PSA
  JRE
  JRWA
  JRFA
}

enum SAStage {
  STAGE_1
  STAGE_2
  INTERVIEW
}

enum OUTCOME {
  SUCCESSFUL
  UNSUCCESSFUL
  PENDING
}

enum JRPStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  WITHDRAWN
}

enum SAStatus {
  SUBMITTED
  UNDER_ASSESSMENT
  ADDITIONAL_INFO_REQUIRED
  COMPLETED
  APPEALED
}

enum Role {
  ADMIN
  USER
}

enum OverSeer {
  DEEPAK
  GANESH
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum VisaType {
  SUB_500
  SUB_482
  SUB_485
  SUB_407
  SUB_186
  SUB_189
  SUB_190
  SUB_600
  SUB_820
  SUB_801
}

enum SbsStatusEnum {
  APPROVED
  NOT_APPROVED
  PENDING
}
